---
// Importing necessary modules and assets
import { getRelativeLocaleUrl } from 'astro:i18n';
import { Icon } from 'astro-icon/components';
import { cn } from '~/helpers/cn';
import { getLangFromUrl, useTranslations } from '~/i18n/utils';
import { navLinks } from '~/constants/nav-links.ts';
import ScrollProgress from './ui/scroll-progress.astro';
import churchLogo from '../assets/church-logo.png';
import LanguageSwitcher from './language-switcher.astro';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<ScrollProgress />
<header class="sticky top-0 z-10 w-full bg-white p-3 xl:px-28 border-b border-gray-200">
	<section class="flex items-center justify-between">
		<a href={lang === 'kok' ? '/kok/' : '/'}>
			<img src={churchLogo.src} alt="" width={45} />
		</a>
		<div class="ml-auto hidden items-center lg:flex">
			<ul class="flex items-center gap-6">
				{
					navLinks.map((link) => (
						<li key={link.title} class="group relative">
							<a
								href={link.type === 'link' ? getRelativeLocaleUrl(lang, link.href) : '#'}
								class={`font-poppins text-lg font-semibold text-black transition-colors ${link.title === 'nav.home' ? 'nav-home' : ''}`}
							>
								{t(link.title)}
							</a>
							{link.type === 'expandable' && (
								<ul class="absolute left-0 top-full mt-2 hidden rounded-md bg-white p-3 shadow-lg group-hover:block md:flex w-64 ">
									{link.expandedLinks.map((sublink) => (
										<li key={sublink.title} class="w-150 ">
											<a
												href={getRelativeLocaleUrl(lang, sublink.href)}
												class="block rounded-md px-4 py-2 text-black transition-all hover:bg-natgeo-yellow"
											>
												{t(sublink.title)}
											</a>
										</li>
									))}
								</ul>
							)}
						</li>
					))
				}
			</ul>
		</div>
		<div class="flex flex-row-reverse">
			<div id="hamburger" class="flex cursor-pointer flex-col items-end lg:hidden ml-3">
				<Icon name="menu" size={35} />
			</div>
			<div class="ml-5">
				<LanguageSwitcher />
			</div>
		</div>
	</section>
</header>

<nav class="fixed inset-0 z-10 w-full overflow-y-auto bg-white px-6 py-6 transition-transform duration-500 ease-out" id="navbar">
	<Icon name="cancel" id="hamburger-close" class="sticky top-3 mb-5 ml-auto cursor-pointer rounded-full text-4xl" />
	<ul class="flex flex-col gap-y-5">
		{
			navLinks.map((link) => (
				<li key={link.title}>
					<a
						data-expandable-links={link.type === 'expandable' ? 'true' : 'false'}
						href={link.type === 'link' ? getRelativeLocaleUrl(lang, link.href) : '#'}
						class="font-popppins group flex items-center justify-between text-xl font-extrabold text-black"
					>
						<span class={cn('border-b-4 border-b-transparent font-poppins transition-all duration-150 group-hover:border-natgeo-yellow', { 'font-noto-sans-kannada': lang === 'kok' })}>
							{t(link.title)}
						</span>
						{link.type === 'expandable' ? (
							<Icon name="chevron-right" class="text-3xl" data-icon-name="chevron-right" />
						) : null}
					</a>
					{link.type === 'expandable' ? (
						<ul class="expandable-links max-h-0 overflow-hidden transition-all duration-500 ease-out">
							{link.expandedLinks.map((sublink) => (
								<li key={sublink.title}>
									<a
										href={getRelativeLocaleUrl(lang, sublink.href)}
										class="group mb-4 flex items-center justify-between font-merriweather text-2xl font-bold"
									>
										<span class={cn('border-b-4 border-b-transparent font-poppins text-lg font-semibold transition-all duration-150 group-hover:border-natgeo-yellow', { 'font-noto-sans-kannada font-normal': lang === 'kok' })}>
											{t(sublink.title)}
										</span>
									</a>
								</li>
							))}
						</ul>
					) : null}
				</li>
			))
		}
	</ul>
</nav>

<style>
	.nav-home {
		display: none;
	}

	@media (max-width: 768px) {
		.nav-home {
			display: block;
		}
	}

	@media (min-width: 769px) {
		.nav-home {
			display: none;
		}
	}

	#navbar {
		transform: translateX(100%);
		transition: transform 200ms ease-out;
	}
	#navbar.open {
		transform: translateX(0);
	}

	a[data-expandable-links='true'] + ul.expandable-links {
		max-height: 0;
		padding: 0;
		margin: 0;
	}
	a[data-is-submenu-expanded='true'] + ul.expandable-links {
		max-height: 500px;
		padding: 10px 0;
		margin: 0;
	}
	svg[data-icon-name='chevron-right'] {
		transition: transform 200ms ease-out;
	}
	a[data-is-submenu-expanded='true'] > svg[data-icon-name='chevron-right'] {
		transform: rotate(90deg);
	}

	@media (min-width: 768px) {
		ul > li.group {
			position: relative;
		}

		ul > li.group > ul {
			display: none;
			position: absolute;
			left: 0;
			top: 100%;
			margin-top: 2px;
			background-color: white;
			border-radius: 4px;
			padding: 10px;
			box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
			transition: all 0.3s ease;
		}

		ul > li.group:hover > ul,
		ul > li.group:focus-within > ul {
			display: block;
		}

		/* Ensures the dropdown stays open when hovering between parent and child elements */
		ul > li.group:hover,
		ul > li.group:focus-within {
			background-color: rgba(255, 255, 255, 0.1);
		}

		ul > li.group:hover > ul,
		ul > li.group:focus-within > ul {
			opacity: 1;
			visibility: visible;
		}
	}
</style>

<script>
	const hamburgerMenu = document.querySelector('#hamburger');
	const hamburgerClose = document.querySelector('#hamburger-close');
	const navbar = document.querySelector('#navbar');
	const expandableLinks = document.querySelectorAll('[data-expandable-links=true]');
	const allNavigationLinks = document.querySelectorAll('nav a:not([data-expandable-links=true])');

	hamburgerMenu?.addEventListener('click', () => {
		navbar?.classList.add('open');
	});

	hamburgerClose?.addEventListener('click', () => {
		expandableLinks.forEach((element) => {
			const expandableContent = element.parentElement?.querySelector('a + ul');
			expandableContent?.style?.setProperty('max-height', '0');
			element.setAttribute('data-is-submenu-expanded', 'false');
		});

		navbar?.classList.remove('open');
	});

	expandableLinks.forEach((element) => {
		element.addEventListener('click', (e) => {
			e.preventDefault();
			const subMenuStatus = element.getAttribute('data-is-submenu-expanded');
			const expandableContent = element?.parentElement?.querySelector('a + ul');

			expandableLinks.forEach((otherElement) => {
				if (otherElement !== element) {
					otherElement.setAttribute('data-is-submenu-expanded', 'false');
					otherElement.parentElement?.querySelector('a + ul')?.style.setProperty('max-height', '0');
				}
			});

			if (subMenuStatus === 'true') {
				element.setAttribute('data-is-submenu-expanded', 'false');
				expandableContent?.style?.setProperty('max-height', '0');
			} else {
				element.setAttribute('data-is-submenu-expanded', 'true');
				expandableContent?.style?.setProperty('max-height', '500px');
			}
		});
	});

	allNavigationLinks.forEach((link) => {
		link.addEventListener('click', () => {
			navbar.classList.remove('open');
		});
	});
</script>
