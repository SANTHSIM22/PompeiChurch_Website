---
import { getRelativeLocaleUrl } from 'astro:i18n';
import { Icon } from 'astro-icon/components';
import { cn } from '~/helpers/cn';
import { getLangFromUrl, useTranslations } from '~/i18n/utils';
import { navLinks } from '~/constants/nav-links.ts';
import ScrollProgress from './ui/scroll-progress.astro';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<ScrollProgress />
<header
	class="sticky top-0 z-10 w-full bg-white/90 p-5 shadow-md backdrop-blur-lg xl:px-28"
>
	<section class="flex items-center justify-between">
		<a
			href={lang === 'kok' ? '/kok/' : '/'}
			class={cn('font-geist font-semibold text-lg', {
				'font-noto-sans-kannada-semibold text-lg': lang === 'kok',
			})}
		>
			{t('landing.church-name')}
		</a>
		<div
			id="hamburger"
			class="ml-auto flex w-fit cursor-pointer flex-col items-end"
		>
			<Icon name="menu" size={26} />
		</div>
	</section>
</header>

<nav
	class="fixed inset-0 z-10 w-full overflow-y-auto bg-white px-6 py-6 transition-transform duration-500 ease-out"
	id="navbar"
>
	<Icon
		name="cancel"
		id="hamburger-close"
		class="sticky top-5 mb-5 ml-auto cursor-pointer rounded-full text-4xl"
	/>
	<ul class="flex flex-col gap-y-5">
		{
			navLinks.map((link) => (
				<li>
					<a
						data-expandable-links={
							link.type === 'expandable' ? 'true' : 'false'
						}
						href={
							link.type === 'link' ? getRelativeLocaleUrl(lang, link.href) : '#'
						}
						class="font-popppins group flex items-center justify-between text-xl font-extrabold text-black"
					>
						<span
							class={cn(
								'border-b-4 border-b-transparent font-poppins transition-all duration-150 group-hover:border-natgeo-yellow',
								{ 'font-noto-sans-kannada': lang === 'kok' },
							)}
						>
							{t(link.title)}
						</span>
						{link.type === 'expandable' ? (
							<Icon
								name="chevron-right"
								class="text-3xl"
								data-icon-name="chevron-right"
							/>
						) : null}
					</a>
					{link.type === 'expandable' ? (
						<ul class="expandable-links max-h-0 overflow-hidden transition-all duration-500 ease-out">
							{link.expandedLinks.map((sublinks) => (
								<li>
									<a
										href={getRelativeLocaleUrl(lang, sublinks.href)}
										class="group mb-4 flex items-center justify-between font-merriweather text-2xl font-bold"
									>
										<span
											class={cn(
												'border-b-4 border-b-transparent font-poppins text-lg font-bold transition-all duration-150 group-hover:border-natgeo-yellow',
												{ 'font-noto-sans-kannada': lang === 'kok' },
											)}
										>
											{t(sublinks.title)}
										</span>
									</a>
								</li>
							))}
						</ul>
					) : null}
				</li>
			))
		}
	</ul>
</nav>

<style>
	#navbar {
		transform: translateX(100%);
		transition: transform 200ms ease-out;
	}
	#navbar.open {
		transform: translateX(0);
	}

	a[data-expandable-links='true'] + ul.expandable-links {
		max-height: 0;
		padding: 0;
		margin: 0;
	}
	a[data-is-submenu-expanded='true'] + ul.expandable-links {
		max-height: 500px;
		padding: 10px 0;
		margin: 0;
	}
	svg[data-icon-name='chevron-right'] {
		transition: transform 200ms ease-out;
	}
	a[data-is-submenu-expanded='true'] > svg[data-icon-name='chevron-right'] {
		transform: rotate(90deg);
	}
</style>

<script>
	const hamburgerMenu = document.querySelector('#hamburger');
	const hamburgerClose = document.querySelector('#hamburger-close');
	const navbar = document.querySelector('#navbar');
	const expandableLinks = document.querySelectorAll(
		'[data-expandable-links=true]',
	);
	const allNavigationLinks = document.querySelectorAll<HTMLAnchorElement>(
		'nav a:not([data-expandable-links=true])',
	);

	hamburgerMenu?.addEventListener('click', () => {
		navbar?.classList.add('open');
	});

	hamburgerClose?.addEventListener('click', () => {
		expandableLinks.forEach((element) => {
			const expandableContent =
				element.parentElement?.querySelector<HTMLUListElement>('a + ul');
			expandableContent?.style?.setProperty('max-height', '0');
			element.setAttribute('data-is-submenu-expanded', 'false');
		});

		navbar?.classList.remove('open');
	});

	expandableLinks.forEach((element) => {
		element.addEventListener('click', (e) => {
			e.preventDefault();
			const subMenuStatus = element.getAttribute('data-is-submenu-expanded');
			//typesafe way of selecting sibling element
			const expandableContent =
				element?.parentElement?.querySelector<HTMLUListElement>('a + ul');

			//toggle collpse state for all other elemnets execpt currrently clicked elemnt
			expandableLinks.forEach((otherElement) => {
				if (otherElement !== element) {
					otherElement.setAttribute('data-is-submenu-expanded', 'false');
					//typesafe of selecting and styling  sibling element
					otherElement.parentElement
						?.querySelector<HTMLUListElement>('a + ul')
						?.style.setProperty('max-height', '0');
				}
			});

			if (subMenuStatus === 'true') {
				element.setAttribute('data-is-submenu-expanded', 'false');
				expandableContent?.style?.setProperty('max-height', '0');
			} else {
				element.setAttribute('data-is-submenu-expanded', 'true');
				expandableContent?.style?.setProperty(
					'max-height',
					`${expandableContent.scrollHeight}px`,
				);
			}
		});
	});

	allNavigationLinks.forEach((link) => {
		link.addEventListener('click', (e) => {
			e.preventDefault();

			expandableLinks.forEach((element) => {
				const expandableContent =
					element.parentElement?.querySelector<HTMLUListElement>('a + ul');

				expandableContent?.style.setProperty('max-height', '0');

				element.setAttribute('data-is-submenu-expanded', 'false');
			});

			navbar?.classList?.remove('open');

			link.addEventListener('transitionend', () => {
				window.location.href = link.href;
			});
		});
	});
</script>
