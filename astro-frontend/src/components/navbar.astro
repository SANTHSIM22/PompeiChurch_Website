---
import { getRelativeLocaleUrl } from 'astro:i18n';
import { Icon } from 'astro-icon/components';

import { cn } from '~/helpers/cn';

import { getLangFromUrl, useTranslations } from '~/i18n/utils';
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

import { navLinks } from '~/constants/nav-links.ts';
---

<header class="sticky top-0 z-10 w-full bg-white/90 p-5 shadow-sm">
	<section class="flex items-center justify-between">
		<a
			href="#"
			class={cn('font-poppins-semibold text-lg font-semibold', {
				'font-noto-sans-kannada-semibold': lang === 'kok',
			})}>{t('landing.church-name')}</a
		>
		<div
			id="hamburger"
			class="ml-auto flex w-fit cursor-pointer flex-col items-end"
		>
			<Icon name="menu" size={26} />
		</div>
	</section>

	<nav
		class="fixed inset-0 z-10 hidden w-full overflow-y-auto bg-white px-6 py-6"
		id="navbar"
	>
		<Icon
			name="cancel"
			id="hamburger-close"
			class="sticky top-5 mb-5 ml-auto cursor-pointer rounded-full text-4xl"
		/>
		<ul class="flex flex-col gap-y-5"
			id="navbar-list"
		>
			{
				navLinks.map((link, index) => {
					return (
						<li
							class={`opacity-0 transform transition-opacity duration-500 ease-out delay-[${index * 100}ms]`}
							style="transition-delay: ${index * 100}ms"
						>
							<a
								data-expandable-links={
									link.type === 'expandable' ? 'true' : 'false'
								}
								href={
									link.type === 'link'
										? getRelativeLocaleUrl(lang, link.href)
										: '#'
								}
								class="font-popppins group flex items-center justify-between text-3xl font-extrabold text-black"
							>
								<span
									class={cn(
										'border-b-4 border-b-transparent font-poppins transition-all duration-150 group-hover:border-natgeo-yellow',
										{ 'font-noto-sans-kannada': lang === 'kok' },
									)}
								>
									{t(link.title)}
								</span>

								{link.type === 'expandable' ? (
									<Icon
										name="chevron-right"
										class="text-3xl"
										data-icon-name="chevron-right"
									/>
								) : null}
							</a>

							{link.type === 'expandable' ? (
								<ul class="ml-3 mt-3 flex flex-col gap-y-5">
									{link.expandedLinks.map((sublinks) => {
										return (
											<a
												href={getRelativeLocaleUrl(lang, sublinks.href)}
												class="group flex items-center justify-between font-merriweather text-xl font-bold text-black"
											>
												<span
													class={cn(
														'border-b-4 border-b-transparent font-poppins transition-all duration-150 group-hover:border-natgeo-yellow',
														{ 'font-noto-sans-kannada': lang === 'kok' },
													)}
												>
													{t(sublinks.title)}
												</span>
											</a>
										);
									})}
								</ul>
							) : null}
						</li>
					);
				})
			}
		</ul>
	</nav>
</header>

<style>
	a[data-expandable-links='true'] + ul {
		display: none;
	}
	a[data-is-submenu-expanded='true'] + ul {
		display: flex;
	}
	svg[data-icon-name='chevron-right'] {
		transition: transform 200ms ease-out;
	}
	a[data-is-submenu-expanded='true'] > svg[data-icon-name='chevron-right'] {
		transform: rotate(90deg);
	}
</style>

<script>
	const hamburgerMenu = document.querySelector<HTMLDivElement>('#hamburger');
	const hamburgerClose =
		document.querySelector<HTMLDivElement>('#hamburger-close');

	const navbar = document.querySelector<HTMLDivElement>('#navbar');
	const navbarList = document.querySelector<HTMLUListElement>('#navbar-list');
	const expandableLinks = document.querySelectorAll<HTMLAnchorElement>(
		'[data-expandable-links=true]',
	);

	const allNavigationLinks = document.querySelectorAll<HTMLAnchorElement>(
		'a:not([data-expandable-links=true])',
	);

	// Show navbar with animations
	hamburgerMenu?.addEventListener('click', () => {
		if (navbar?.classList.contains('hidden')) {
			navbar.classList.replace('hidden', 'block');
			// Reveal links with delay animation
			const listItems = navbarList.querySelectorAll('li');
			listItems.forEach((li, index) => {
				setTimeout(() => {
					li.classList.replace('opacity-0', 'opacity-100');
				}, index * 100); // delay each item by 100ms
			});
		}
	});

	for (const element of expandableLinks) {
		element.addEventListener('click', (e) => {
			e.preventDefault();
			const subMenuStatus = element.getAttribute('data-is-submenu-expanded');
			if (subMenuStatus === 'true') {
				element.setAttribute('data-is-submenu-expanded', 'false');
			} else {
				element.setAttribute('data-is-submenu-expanded', 'true');
			}
		});
	}

	for (const links of allNavigationLinks) {
		links.addEventListener('click', (_) => {
			navbar?.classList.replace('block', 'hidden');
			const listItems = navbarList.querySelectorAll('li');
			listItems.forEach((li) => {
				li.classList.replace('opacity-100', 'opacity-0');
			});
			for (const element of expandableLinks) {
				element.setAttribute('data-is-submenu-expanded', 'false');
			}
		});
	}

	hamburgerClose?.addEventListener('click', () => {
		if (navbar?.classList.contains('block')) {
			navbar.classList.replace('block', 'hidden');
			const listItems = navbarList.querySelectorAll('li');
			listItems.forEach((li) => {
				li.classList.replace('opacity-100', 'opacity-0');
			});
			for (const element of expandableLinks) {
				element.setAttribute('data-is-submenu-expanded', 'false');
			}
		}
	});
</script>

