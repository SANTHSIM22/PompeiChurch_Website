---
import { Icon } from 'astro-icon/components';
interface Subtitle {
	commission: string;
	name: string;
}

interface Props {
	convenor: string;
	title: string;
	subtitles?: Subtitle[];
}

const { convenor, title, subtitles } = Astro.props;
const uniqueId = Math.random().toString(36).substring(2, 9);
---

<div
	class="mx-auto my-10 w-full max-w-3xl rounded-md border border-yellow-300 shadow-sm"
>
	<div
		class="dropdown-toggle flex cursor-pointer items-center justify-between rounded-md bg-yellow-100 p-4"
		data-dropdown-id={uniqueId}
	>
		<h3 class="text-xl font-extrabold">{title}</h3>
		<Icon
			name="chevron-right"
			class="arrow h-6 w-6 transform text-yellow-600 transition-transform"
			data-icon-name="chevron-right"
		/>
	</div>

	<div
		class="dropdown-content overflow-hidden pl-4 pr-4 text-left"
		data-dropdown-id={uniqueId}
	>
		<div class="mt-2">
			<p class="text-xl text-gray-700">
				<strong>Convenor:</strong>
				<span class="text-xl text-gray-500">{convenor}</span>
			</p>
		</div>
		<table class="mb-4 mt-4 w-full table-auto">
			<thead>
				<tr>
					<th
						class="border-b-2 pb-2 text-left text-xl font-bold text-yellow-500"
						>Commission</th
					>
					<th
						class="border-b-2 pb-2 text-left text-xl font-bold text-yellow-500"
						>Secretary</th
					>
				</tr>
			</thead>
			<tbody>
				{
					subtitles?.map((subtitle) => (
						<tr key={subtitle.commission}>
							<td class="py-2 text-sm">
								<strong>{subtitle.commission}</strong>
							</td>
							<td class="py-2 text-sm text-gray-600">{subtitle.name}</td>
						</tr>
					))
				}
			</tbody>
		</table>
	</div>
</div>

<style>
	.dropdown-content {
		max-height: 0;
		opacity: 0;
		transition:
			max-height 0.4s ease-in-out,
			opacity 0.4s ease-in-out;
		overflow: hidden;
	}
	.dropdown-content.open {
		max-height: 1000px;
		opacity: 1;
	}
	.arrow {
		transition: transform 0.3s ease;
		transform: rotate(90deg);
	}
	.arrow.rotate {
		transform: rotate(-90deg);
	}
	@media (max-width: 768px) {
		.text-lg {
			font-size: 0.875rem;
		}
	}
</style>

<script>
	document.querySelectorAll('.dropdown-toggle').forEach((toggle) => {
		toggle.addEventListener('click', function () {
			const dropdownId = this.getAttribute('data-dropdown-id');
			const dropdownContent = document.querySelector(
				`.dropdown-content[data-dropdown-id="${dropdownId}"]`
			);
			const arrow = this.querySelector('.arrow');
			const isOpen = dropdownContent.classList.contains('open');

			if (isOpen) {
				dropdownContent.style.maxHeight = dropdownContent.scrollHeight + 'px';
				dropdownContent.offsetHeight;
				dropdownContent.style.maxHeight = '0';
				dropdownContent.classList.remove('open');
				arrow.classList.remove('rotate');
			} else {
				dropdownContent.style.maxHeight = dropdownContent.scrollHeight + 'px';
				dropdownContent.classList.add('open');
				arrow.classList.add('rotate');
			}
		});
	});
</script>
